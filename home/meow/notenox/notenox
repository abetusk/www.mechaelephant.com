#!/usr/bin/env node

var fs = require('fs');

NOTENOX_VERSION = "0.1.0";

function show_version(fp) {
  fp.write("version: " + NOTENOX_VERSION + "\n");
}

function show_help(fp) {

  show_version(fp)
  fp.write("\n");
  fp.write("usage:\n");
  fp.write("\n");
  fp.write("    notenox [-h] [-v] [-n note] [-t timestamp] [-k keyword] [-l link] [-e extra] [_note]\n");
  fp.write("\n");
  fp.write("  [-n|--note note ]           note (ignored if _note specified)\n");
  fp.write("  [-t|--timestamp timestamp]  timestamp (seconds UTC, defaults to now)\n");
  fp.write("  [-k|--keyword keyword]      keyword (can be specified multiple times)\n");
  fp.write("  [-K keywords]               add list of keywords (seperated by';')\n");
  fp.write("  [-l|--link link]            link (can be specified multiple times)\n");
  fp.write("  [-e|--extra extra ]         extra information (can be specified multiple times)\n");
  fp.write("  [-T|--title titlename]      add special 'title' keyword to keyword (append extra keyword 'title:<titlename>' to keywords\n");
  fp.write("  [-u|--id id]                set ID (defaults to random)\n");
  fp.write("  [-s]                        silent (don't print out note)\n");
  fp.write("  [-S]                        save note (unimplemented)\n");
  fp.write("  [-c]                        config? (unimplemented)\n");
  fp.write("  [-h]                        show help (this screen)\n");
  fp.write("  [-v]                        show version\n");
  fp.write("\n");
  fp.write("\n");
}

function s4() {
  return Math.floor((1 + Math.random()) * 0x10000)
             .toString(16)
             .substring(1);
};

function guid() {
  return s4() + s4() + '-' +
         s4() + '-' +
         s4() + '-' +
         s4() + '-' + s4() + s4() + s4();
}

var flags = {
  "silent": false,
  "save" : false,
  "config": false
};

var note_info = {
  "id": guid(),
  "timestamp": Date.now() / 1000.0,
  "keyword":[],
  "extra": [],
  "note" : undefined,
  "link":[]
};

var getopt = require("posix-getopt");
var parser, opt;
parser = new getopt.BasicParser("hvt:(timestamp)k:(keyword)e:(extra)n:(note)l:(link)T:(title)u:(id)K:sSc", process.argv);
while ((opt =  parser.getopt()) !== undefined) {
  switch(opt.option) {

    case 'h':
      show_help(process.stdout);
      process.exit(0);
      break;

    case 'v':
      show_version(process.stdout);
      process.exit(0);
      break;

    case 't':
      note_info.timestamp = parseFloat(opt.optarg);
      break;

    case 'k':
      note_info.keyword.push(opt.optarg);
      break;

    case 'K':
      var _k = opt.optarg.split(";");
      for (var ii=0; ii<_k.length; ii++) {
        note_info.keyword.push(_k[ii].trim());
      }
      break;

    case 'l':
      note_info.link.push(opt.optarg);
      break;

    case 'e':
      note_info.extra.push(opt.optarg);
      break;

    case 'n':
      note_info.note = opt.optarg;
      break;

    case 'T':
      note_info.keyword.push( "title:" + opt.optarg);
      break;

    case 'u':
      note_info.id = opt.optarg;
      break;

    case 's':
      flags.silent = true;
      break;

    case 'S':
      flags.save = true;
      break;

    case 'c':
      flags.config = true;
      break;

    default:
      show_help(process.stderr);
      process.exit(-1);
      break;
  }
}

if (parser.optind() < process.argv.length) {
  note_info.note = process.argv[parser.optind()];
}

if (typeof note_info.note === "undefined") {
  show_help(process.stderr);
  process.exit(-1);
}


if (!flags.silent) {
  console.log(JSON.stringify(note_info, null, 2));
}

if (flags.save) {
  var ret = fs.writeFileSync( note_info.id + ".json", JSON.stringify(note_info, null, 2), 'utf-8' );
}
