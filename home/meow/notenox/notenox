#!/usr/bin/env node


/*
*
* To the extent possible under law, the person who associated CC0 with
* this source code has waived all copyright and related or neighboring rights
* to this source code.
*
* You should have received a copy of the CC0 legalcode along with this
* work.  If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.
*
*/

var fs = require('fs');

NOTENOX_VERSION = "0.1.0";
CONFIG_FILE = process.env.HOME + "/.config/notenox/notenox.conf";

function show_version(fp) {
  fp.write("version: " + NOTENOX_VERSION + "\n");
}

function show_help(fp) {

  show_version(fp)
  fp.write("\n");
  fp.write("usage:\n");
  fp.write("\n");
  fp.write("    notenox [-h] [-v] [-n note] [-t timestamp] [-k keyword] [-l link] [-e extra] [-I] [OP [OPVAL]]\n");
  fp.write("\n");
  fp.write("  [OP]                        flush|kw|title|filter|help (text as note if no op found) (filter uses OPVAL)\n");
  fp.write("  [-n|--note note ]           note (ignored if OP specified and not keyword)\n");
  fp.write("  [-t|--timestamp timestamp]  timestamp (seconds UTC, defaults to now)\n");
  fp.write("  [-k|--keyword keyword]      keyword (can be specified multiple times)\n");
  fp.write("  [-K keywords]               add list of keywords (seperated by';')\n");
  fp.write("  [-l|--link link]            link (can be specified multiple times)\n");
  fp.write("  [-e|--extra extra ]         extra information (can be specified multiple times)\n");
  fp.write("  [-T|--title titlename]      add special 'title' keyword to keyword (append extra keyword 'title:<titlename>' to keywords\n");
  fp.write("  [-u|--id id]                set ID (defaults to random)\n");
  fp.write("  [-I]                        enable interpretation of note (interpret carriage returns)\n");
  fp.write("  [-s]                        silent (don't print out note)\n");
  fp.write("  [-S]                        save note (unimplemented)\n");
  fp.write("  [-c <cfgfile>]              specify config file (default " +  CONFIG_FILE + ")\n");
  fp.write("  [-D]                        debug output\n");
  fp.write("  [-h]                        show help (this screen)\n");
  fp.write("  [-v]                        show version\n");
  fp.write("\n");
  fp.write("\n");
}

function s4() {
  return Math.floor((1 + Math.random()) * 0x10000)
             .toString(16)
             .substring(1);
};

function guid() {
  return s4() + s4() + '-' +
         s4() + '-' +
         s4() + '-' +
         s4() + '-' + s4() + s4() + s4();
}


var option = {
  "debug" : false,
  "silent": false,
  "save" : false,
  "config": false,
  "config_file" : CONFIG_FILE,
  "enable" : false,
  "db" : "",
  "out_dir": "./"
};

var override_option = {};

//---
//---
//---


function update_option(dat, override) {
  override = ((typeof override === "undefined") ? {} : override);
  for (var key in option) {

    // update the option if it's in our custom config
    //
    if (key in dat) {

      // but not if it's specified on the command line
      //
      if ( !(key in override) ) {
        option[key] = dat[key];

        if ((key == "out_dir") ||
            (key == "db")) {
          option[key] = option[key].replace( '~', process.env.HOME );
        }

      }

    }

  }
}

function flush_db() {
}

function list_kw() {
  let db = JSON.parse(fs.readFileSync( option.db ));

  let _kw_list = [];
  let _kw_map = {};

  for (let _id in db) {
    let kw = db[_id].keyword;

    for (let ii=0; ii<kw.length; ii++) {

      if (!(kw[ii] in _kw_map)) {
        _kw_map[ kw[ii] ] = _kw_list.length;
        _kw_list.push( { "kw": kw[ii], "freq": 0 } );
      }
      let _idx = _kw_map[ kw[ii] ];
      _kw_list[_idx].freq++;
    }

  }

  _kw_list.sort( function(a,b) {
    if (a.freq < b.freq) { return -1; }
    if (a.freq > b.freq) { return  1; }
    return 0;
  });

  for (let ii=0; ii<_kw_list.length; ii++) {
    console.log(_kw_list[ii].kw, _kw_list[ii].freq);
  }



}

function list_title() {
  let db = JSON.parse(fs.readFileSync( option.db ));

  let _title_list = [];
  let _title_map = {};

  for (let _id in db) {
    let kw = db[_id].keyword;

    for (let ii=0; ii<kw.length; ii++) {
      if ( kw[ii].match( '^title:' ) ) {

        if (!(kw[ii] in _title_map)) {
          _title_map[ kw[ii] ] = _title_list.length;
          _title_list.push( { "title": kw[ii], "freq": 0 } );
        }
        let _idx = _title_map[ kw[ii] ];
        _title_list[_idx].freq++;
      }
    }

  }

  _title_list.sort( function(a,b) {
    if (a.freq < b.freq) { return -1; }
    if (a.freq > b.freq) { return  1; }
    return 0;
  });

  for (let ii=0; ii<_title_list.length; ii++) {
    console.log(_title_list[ii].title.split(":")[1], _title_list[ii].freq);
  }
}

function print_id(id) {
  let db = JSON.parse(fs.readFileSync( option.db ));

  if (id in db) {
    console.log(JSON.stringify(db[id], undefined, 2));
  }
}


function _fold_w(s, w_hint, sep) {
  w_hint = ((typeof w_hint === "undefined") ? 80 : w_hint);
  sep = ((typeof sep === "undefined") ? " " : sep);
  let tok = s.split(sep);

  let cur_lines = [];


  let cur_line = [];
  let c_count = -1;
  for (let ii=0; ii<tok.length; ii++) {
    let _t = tok[ii].split("\n");

    cur_line.push(_t[0]);
    c_count += _t[0] + 1;

    if (c_count >= w_hint) {
      cur_lines.push( cur_line.join(sep) );
      cur_line = [];
      c_count = -1;
    }

    for (let jj=1; jj<_t.length; jj++) {
      cur_lines.push( cur_line.join(sep) );
      cur_line = [ _t[jj] ];
      c_count = _t[jj].length;
    }

  }
  if (cur_line.length > 0) {
    cur_lines.push( cur_line.join(sep) );
  }

  return cur_lines.join("\n");
}

function filter_keyword(kw_filter) {
  let db = JSON.parse(fs.readFileSync( option.db ));

  let ele = [];

  for (let _id in db) {
    let kw = db[_id].keyword;

    let found = false;
    for (let ii=0; ii<kw.length; ii++) {
      if (kw[ii] == kw_filter) { found = true; break; }
      if (kw[ii] == ("title:" + kw_filter) ) { found = true; break; }
    }

    if (found) {
      ele.push(db[_id]);
    }

  }

  ele.sort( function(a,b) {
    if (a.timestamp < b.timestamp) { -1; }
    if (a.timestamp > b.timestamp) {  1; }
    return 0;
  });

  console.log("--------------");
  for (let ii=0; ii<ele.length; ii++) {
    console.log( "\n" + _fold_w(ele[ii].note) + "\n" );
    console.log("id:", ele[ii].id);
    console.log("kw:", ele[ii].keyword.join(" ,"));
    console.log("--------------");
  }

}

//---
//---
//---

var note_info = {
  "id": guid(),
  "timestamp": Date.now() / 1000.0,
  "keyword":[],
  "extra": [],
  "note" : undefined,
  "link":[]
};

var getopt = require("posix-getopt");
var parser, opt;
parser = new getopt.BasicParser("hvt:(timestamp)k:(keyword)e:(extra)n:(note)l:(link)T:(title)u:(id)K:s(silent)S(save)c:(config)D(debug)I(interpret)", process.argv);
while ((opt =  parser.getopt()) !== undefined) {
  switch(opt.option) {

    case 'h':
      show_help(process.stdout);
      process.exit(0);
      break;

    case 'I':
      option.enable = true;
      break;

    case 'v':
      show_version(process.stdout);
      process.exit(0);
      break;

    case 't':
      note_info.timestamp = parseFloat(opt.optarg);
      break;

    case 'k':
      note_info.keyword.push(opt.optarg);
      break;

    case 'K':
      var _k = opt.optarg.split(";");
      for (var ii=0; ii<_k.length; ii++) {
        note_info.keyword.push(_k[ii].trim());
      }
      break;

    case 'l':
      note_info.link.push(opt.optarg);
      break;

    case 'e':
      note_info.extra.push(opt.optarg);
      break;

    case 'n':
      note_info.note = opt.optarg;
      break;

    case 'T':
      note_info.keyword.push( "title:" + opt.optarg);
      break;

    case 'u':
      note_info.id = opt.optarg;
      break;

    case 's':
      option.silent = true;
      override_option["silent"] = true;
      break;

    case 'S':
      option.save = true;
      override_option["save"] = true;
      break;

    case 'c':
      option.config = true;
      option.out_dir = opt.optarg;
      override_option["config"] = true;
      break;

    case 'D':
      option.debug = true;
      break;

    default:
      show_help(process.stderr);
      process.exit(-1);
      break;
  }
}

if (fs.existsSync(option.config_file)) {
  var cfg_dat = JSON.parse(fs.readFileSync(option.config_file));
  update_option(cfg_dat, override_option);
}
else {
}

if (option.debug) {
  console.log(JSON.stringify(option, null, 2));
  process.exit(0);
}

let OP = undefined
let OPVAL = undefined;

if (parser.optind() < process.argv.length) {
  OP = process.argv[parser.optind()];

  if ((parser.optind()+1) < process.argv.length) {
    OPVAL = process.argv[parser.optind()+1];
  }
  //note_info.note = process.argv[parser.optind()];
}

if      (OP == "flush") { flush_db(); }
else if (OP == "kw")    { list_kw(); }
else if (OP == "title") { list_title(); }
else if (OP == "filter") { filter_keyword(OPVAL); }
else if (OP == "id") { print_id(OPVAL); }
else if (OP == "help") { show_help(process.stdout); }
else {

  if (typeof OP !== "undefined") {
    note_info.note = OP;
  }

  if (typeof note_info.note === "undefined") {
    show_help(process.stderr);
    process.exit(-1);
  }

  else {

    // only interprets '\n'
    //
    if (option.enable) {
      var _re = /\\n/g;
      note_info.note = note_info.note.replace(_re, "\n");
    }

    if (!option.silent) {
      console.log(JSON.stringify(note_info, null, 2));
    }

    if (option.save) {
      var ret = fs.writeFileSync( option.out_dir + "/" + note_info.id + ".json", JSON.stringify(note_info, null, 2), 'utf-8' );
    }

  }

}
